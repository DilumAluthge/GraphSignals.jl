var documenterSearchIndex = {"docs":
[{"location":"manual/featuredgraph/#FeaturedGraph","page":"FeaturedGraph","title":"FeaturedGraph","text":"","category":"section"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"NullGraph","category":"page"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"FeaturedGraph","category":"page"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"graph","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.graph","page":"FeaturedGraph","title":"GraphSignals.graph","text":"graph(::AbstractFeaturedGraph)\n\nGet referenced graph.\n\n\n\n\n\nSupport adjacency matrix\n\n\n\n\n\n","category":"function"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"node_feature","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.node_feature","page":"FeaturedGraph","title":"GraphSignals.node_feature","text":"node_feature(::AbstractFeaturedGraph)\n\nGet node feature attached to graph.\n\n\n\n\n\n","category":"function"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"edge_feature","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.edge_feature","page":"FeaturedGraph","title":"GraphSignals.edge_feature","text":"edge_feature(::AbstractFeaturedGraph)\n\nGet edge feature attached to graph.\n\n\n\n\n\n","category":"function"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"global_feature","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.global_feature","page":"FeaturedGraph","title":"GraphSignals.global_feature","text":"global_feature(::AbstractFeaturedGraph)\n\nGet global feature attached to graph.\n\n\n\n\n\n","category":"function"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"has_graph","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.has_graph","page":"FeaturedGraph","title":"GraphSignals.has_graph","text":"has_graph(::AbstractFeaturedGraph)\n\nCheck if graph is available or not.\n\n\n\n\n\n","category":"function"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"has_node_feature","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.has_node_feature","page":"FeaturedGraph","title":"GraphSignals.has_node_feature","text":"has_node_feature(::AbstractFeaturedGraph)\n\nCheck if node feature is available or not.\n\n\n\n\n\n","category":"function"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"has_edge_feature","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.has_edge_feature","page":"FeaturedGraph","title":"GraphSignals.has_edge_feature","text":"has_edge_feature(::AbstractFeaturedGraph)\n\nCheck if edge feature is available or not.\n\n\n\n\n\n","category":"function"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"has_global_feature","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.has_global_feature","page":"FeaturedGraph","title":"GraphSignals.has_global_feature","text":"has_global_feature(::AbstractFeaturedGraph)\n\nCheck if global feature is available or not.\n\n\n\n\n\n","category":"function"},{"location":"manual/linearalgebra/#Linear-algebraic-APIs","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"","category":"section"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"adjacency_matrix","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"degrees","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"degree_matrix","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"inv_sqrt_degree_matrix","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"laplacian_matrix","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"laplacian_matrix!","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"normalized_laplacian","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"normalized_laplacian!","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"scaled_laplacian","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"scaled_laplacian!","category":"page"},{"location":"manual/graph/#Graph-related-APIs","page":"Graph-related APIs","title":"Graph-related APIs","text":"","category":"section"},{"location":"manual/graph/","page":"Graph-related APIs","title":"Graph-related APIs","text":"nv","category":"page"},{"location":"manual/graph/#LightGraphs.nv","page":"Graph-related APIs","title":"LightGraphs.nv","text":"nv(::AbstractFeaturedGraph)\n\nGet node number of graph.\n\n\n\n\n\n","category":"function"},{"location":"manual/graph/","page":"Graph-related APIs","title":"Graph-related APIs","text":"ne","category":"page"},{"location":"manual/graph/#LightGraphs.ne","page":"Graph-related APIs","title":"LightGraphs.ne","text":"ne(::AbstractFeaturedGraph)\n\nGet edge number of graph.\n\n\n\n\n\n","category":"function"},{"location":"manual/graph/","page":"Graph-related APIs","title":"Graph-related APIs","text":"adjacency_list","category":"page"},{"location":"manual/graph/#GraphSignals.adjacency_list","page":"Graph-related APIs","title":"GraphSignals.adjacency_list","text":"adjacency_list(adj)\n\nTransform a adjacency matrix into a adjacency list.\n\n\n\n\n\nadjacency_list(::AbstractFeaturedGraph)\n\nGet adjacency list of graph.\n\n\n\n\n\n","category":"function"},{"location":"manual/graph/","page":"Graph-related APIs","title":"Graph-related APIs","text":"is_directed","category":"page"},{"location":"manual/graph/","page":"Graph-related APIs","title":"Graph-related APIs","text":"fetch_graph","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GraphSignals","category":"page"},{"location":"#GraphSignals","page":"Home","title":"GraphSignals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GraphSignals]","category":"page"},{"location":"#GraphSignals.FeaturedGraph","page":"Home","title":"GraphSignals.FeaturedGraph","text":"FeaturedGraph(g, [mt]; nf, ef, gf, directed)\n\nA type representing a graph structure and storing also arrays  that contain features associated to nodes, edges, and the whole graph. \n\nA FeaturedGraph can be constructed out of different objects g representing the connections inside the graph. When constructed from another featured graph fg, the internal graph representation is preserved and shared. \n\nArguments\n\ng: Data representing the graph topology. Possible type are \nAn adjacency matrix.\nAn adjacency list.\nA LightGraphs' graph, i.e. SimpleGraph, SimpleDiGraph from LightGraphs, or SimpleWeightedGraph,   SimpleWeightedDiGraph from SimpleWeightedGraphs.\nAn AbstractFeaturedGraph object.\nmt: matrix type for g in matrix form. if graph is in matrix form, mt is recorded as one of :adjm,   :laplacian, :normalized or :scaled.\nnf: Node features.\nef: Edge features.\ngf: Global features.\n\nUsage\n\nusing GraphSignals, CUDA\n\n# Construct from adjacency list representation\ng = [[2,3], [1,4,5], [1], [2,5], [2,4]]\nfg = FeaturedGraph(g)\n\n# Number of nodes and edges\nnv(fg)  # 5\nne(fg)  # 10\n\n# From a LightGraphs' graph\nfg = FeaturedGraph(erdos_renyi(100, 20))\n\n# Copy featured graph while also adding node features\nfg = FeaturedGraph(fg, nf=rand(100, 5))\n\n# Send to gpu\nfg = fg |> cu\n\nSee also graph, node_feature, edge_feature, and global_feature\n\n\n\n\n\n","category":"type"},{"location":"#GraphSignals.NullGraph","page":"Home","title":"GraphSignals.NullGraph","text":"NullGraph()\n\nNull object for FeaturedGraph.\n\n\n\n\n\n","category":"type"},{"location":"#GraphSignals.SparseGraph","page":"Home","title":"GraphSignals.SparseGraph","text":"SparseGraph(A, directed)\n\nA sparse graph structure represents by sparse matrix. A directed graph is represented by a sparse matrix, of which column index as source node index and row index as sink node index.\n\n\n\n\n\n","category":"type"},{"location":"#GraphSignals._to_csc_index-Tuple{SparseArrays.SparseMatrixCSC, Integer, Integer}","page":"Home","title":"GraphSignals._to_csc_index","text":"Transform a regular cartesian index A[i, j] into a CSC-compatible index spA.nzval[idx].\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.adjacency_list-Tuple{NullGraph}","page":"Home","title":"GraphSignals.adjacency_list","text":"adjacency_list(::AbstractFeaturedGraph)\n\nGet adjacency list of graph.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.adjacency_list-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T","page":"Home","title":"GraphSignals.adjacency_list","text":"adjacency_list(adj)\n\nTransform a adjacency matrix into a adjacency list.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.aggregate_index","page":"Home","title":"GraphSignals.aggregate_index","text":"aggregate_index(sg; direction=:undirected, kind=:edge)\n\nGenerate index structure for scatter operation.\n\nArguments\n\nsg::SparseGraph: The reference graph.\ndirection::Symbol: The direction of an edge to be choose to aggregate. It must be one of :inward and :outward.\nkind::Symbol: To aggregate feature upon edge or vertex. It must be one of :edge and :vertex.\n\n\n\n\n\n","category":"function"},{"location":"#GraphSignals.edge_feature-Tuple{NullGraph}","page":"Home","title":"GraphSignals.edge_feature","text":"edge_feature(::AbstractFeaturedGraph)\n\nGet edge feature attached to graph.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.edge_scatter-Union{Tuple{D}, Tuple{Any, AbstractArray, SparseGraph{D, M, V, T} where {M<:SparseArrays.AbstractSparseMatrixCSC, V<:(AbstractVector{T} where T), T}}} where D","page":"Home","title":"GraphSignals.edge_scatter","text":"edge_scatter(aggr, E, sg, direction=:undirected)\n\nScatter operation for aggregating edge feature into vertex feature.\n\nArguments\n\naggr: aggregating operators, e.g. +.\nE: Edge features with size of (#feature, #edge).\nsg::SparseGraph: The reference graph.\ndirection::Symbol: The direction of an edge to be choose to aggregate. It must be one of :undirected, :inward and :outward.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.global_feature-Tuple{NullGraph}","page":"Home","title":"GraphSignals.global_feature","text":"global_feature(::AbstractFeaturedGraph)\n\nGet global feature attached to graph.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.graph-Tuple{GraphMask}","page":"Home","title":"GraphSignals.graph","text":"Support adjacency matrix\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.graph-Tuple{NullGraph}","page":"Home","title":"GraphSignals.graph","text":"graph(::AbstractFeaturedGraph)\n\nGet referenced graph.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.has_edge_feature-Tuple{NullGraph}","page":"Home","title":"GraphSignals.has_edge_feature","text":"has_edge_feature(::AbstractFeaturedGraph)\n\nCheck if edge feature is available or not.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.has_global_feature-Tuple{NullGraph}","page":"Home","title":"GraphSignals.has_global_feature","text":"has_global_feature(::AbstractFeaturedGraph)\n\nCheck if global feature is available or not.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.has_graph-Tuple{NullGraph}","page":"Home","title":"GraphSignals.has_graph","text":"has_graph(::AbstractFeaturedGraph)\n\nCheck if graph is available or not.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.has_node_feature-Tuple{NullGraph}","page":"Home","title":"GraphSignals.has_node_feature","text":"has_node_feature(::AbstractFeaturedGraph)\n\nCheck if node feature is available or not.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.incident_edges-Tuple{SparseGraph{false, M, V, T} where {M<:SparseArrays.AbstractSparseMatrixCSC, V<:(AbstractVector{T} where T), T}, Any}","page":"Home","title":"GraphSignals.incident_edges","text":"incident_edges(sg, i)\n\nReturn the edges incident to vertex i in sparse graph sg.\n\nArguments\n\nsg::SparseGraph: sparse graph to query.\ni: vertex index.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.mask-Tuple{AbstractFeaturedGraph, AbstractArray}","page":"Home","title":"GraphSignals.mask","text":"mask(fg, m)\n\nA syntax sugar for masking graph.\n\nReturns a GraphMask.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.neighbor_scatter-Tuple{Any, AbstractArray, SparseGraph}","page":"Home","title":"GraphSignals.neighbor_scatter","text":"neighbor_scatter(aggr, X, sg, direction=:undirected)\n\nScatter operation for aggregating neighbor vertex feature together.\n\nArguments\n\naggr: aggregating operators, e.g. +.\nX: Vertex features with size of (#feature, #vertex).\nsg::SparseGraph: The reference graph.\ndirection::Symbol: The direction of an edge to be choose to aggregate. It must be one of :undirected, :inward and :outward.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.node_feature-Tuple{NullGraph}","page":"Home","title":"GraphSignals.node_feature","text":"node_feature(::AbstractFeaturedGraph)\n\nGet node feature attached to graph.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.order_edges-Tuple{SparseArrays.SparseMatrixCSC}","page":"Home","title":"GraphSignals.order_edges","text":"Order the edges in a graph by giving a unique integer to each edge.\n\n\n\n\n\n","category":"method"},{"location":"#LightGraphs.ne-Tuple{NullGraph}","page":"Home","title":"LightGraphs.ne","text":"ne(::AbstractFeaturedGraph)\n\nGet edge number of graph.\n\n\n\n\n\n","category":"method"},{"location":"#LightGraphs.neighbors-Tuple{SparseGraph{false, M, V, T} where {M<:SparseArrays.AbstractSparseMatrixCSC, V<:(AbstractVector{T} where T), T}, Integer}","page":"Home","title":"LightGraphs.neighbors","text":"neighbors(sg, i)\n\nReturn the neighbors of vertex i in sparse graph sg.\n\nArguments\n\nsg::SparseGraph: sparse graph to query.\ni: vertex index.\n\n\n\n\n\n","category":"method"},{"location":"#LightGraphs.nv-Tuple{NullGraph}","page":"Home","title":"LightGraphs.nv","text":"nv(::AbstractFeaturedGraph)\n\nGet node number of graph.\n\n\n\n\n\n","category":"method"}]
}
